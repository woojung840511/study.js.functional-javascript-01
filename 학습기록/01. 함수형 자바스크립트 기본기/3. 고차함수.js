/**
 * # 일급 함수
 * - 함수가 값으로 다뤄질 수 있다.
 *
 * # 고차 함수
 * - 함수가 일급값으로 다뤄질 수 있다는 점을 이용한 함수
 * - 함수를 값으로 다루는 함수
 * - 고차 함수는 크게 2가지 종류가 있다.
 *
 * ## 고차함수 유형 1 - 함수를 인자로 받아서 실행하는 함수
 * - apply1
 * - times
 *
 * ## 고차함수 유형 2 - 함수를 만들어 리턴하는 함수 (클로저를 만들어 리턴하는 함수)
 * - addMaker
 */

const log = console.log;

/**
 * ## 고차함수 유형 1 - 함수를 인자로 받아서 실행하는 함수
 */

// 함수를 받아서 함수에 1을 적용하는 함수
// 함수를 인자값으로 다루고 있기 때문에 apply1은 고차함수다
// 받은 함수에 1을 적용해서 실행한다. 실행한 후 평가된 값을 리턴한다.
const apply1 = f => f(1);

const add2 = a => a + 2;

// apply1에 add2 함수를 인자로 넘겼다.
log(apply1(add2)); // 결과는 3
log(apply1(a => a - 1)); // 결과는 0

// times : 함수와 숫자를 받아서, 숫자만큼 함수를 실행하는 함수
// 어플리케이티브 프로그래밍?
const times = (f, n) => {
    let i = -1;
    while (++i < n) f(i);
}

times(log, 3); // 0,1,2 가 출력된다.
times(a => log(a + 10), 3); // 10, 11, 12가 출력된다.



/**
 * 고차함수 유형 2 - 함수를 만들어 리턴하는 함수 (클로저를 만들어 리턴하는 함수)
 */

const addMaker = a => b => a + b;
const add10 = addMaker(10);

// addMaker(10)이 리턴된 결과, add10은 b => a + b 라는 함수가 되어있다.
// addMaker(10) 함수가 실행되었을 때 함수를 리턴하고 있기 때문이다.
log(add10); // b => a + b

// add10 사용하기
log(add10(5)); // 15
log(add10(10)); // 20

// 클로저는 add10 함수가 a를 계속해서 기억하고 있다는 뜻이다.
// 리턴된 함수  b => a + b가 a를 계속해서 기억하고 있다는 뜻이다.
// b => a + b는 함수이자, a를 기억하는 클로저이다.
// 클로저는 함수가 만들어질 때의 환경인 'a'와 함수 자체의 객체 'b => a + b'를 통칭해서 말하는 용어다.

// addMaker는 클로저를 리턴하는 함수다.
